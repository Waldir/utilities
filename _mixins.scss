//============================================================
// fonts 
//============================================================
@mixin font-size($size: 12px){
  font-size: $size; //fallback for old browsers
  font-size: ($size / 16px)+rem;
}

@mixin serif-font()      { font-family: 'Montserrat', 'Helvetica Neue', Arial, sans-serif; }
@mixin sans-serif-font() { font-family: 'Open Sans', 'Helvetica Neue', Arial, sans-serif; }

//============================================================
// style
//============================================================
@mixin line-height($heightValue: 12px){
  line-height: $heightValue; //fallback for old browsers
  line-height: ($heightValue / 16px)+rem; } 

@mixin border-radius($radius: 0.5em)
{
  -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
      -ms-border-radius: $radius;
       -o-border-radius: $radius;
          border-radius: $radius;
}

@mixin border-radius-plus($tl:0, $tr:0, $bl:0, $br:0){
  -webkit-border-top-left-radius: $tl;
  -webkit-border-top-right-radius: $tr;
  -webkit-border-bottom-right-radius: $br;
  -webkit-border-bottom-left-radius: $bl;

  -moz-border-radius-topleft: $tl;
  -moz-border-radius-topright: $tr;
  -moz-border-radius-bottomright: $br;
  -moz-border-radius-bottomleft: $bl;

  -ms-border-radius-topleft: $tl;
  -ms-border-radius-topright: $tr;
  -ms-border-radius-bottomright: $br;
  -ms-border-radius-bottomleft: $bl;

  -o-border-radius-topleft: $tl;
  -o-border-radius-topright: $tr;
  -o-border-radius-bottomright: $br;
  -o-border-radius-bottomleft: $bl;

  border-top-left-radius: $tl;
  border-top-right-radius: $tr;
  border-bottom-right-radius: $br;
  border-bottom-left-radius: $bl; }

@mixin background-size($val){
  -webkit-background-size: $val;
     -moz-background-size: $val;
       -o-background-size: $val;
          background-size: $val; }

@mixin box-shadow($top, $left, $blur, $spread, $color: #000000, $inset: false) {
  @if $inset {
    -webkit-box-shadow: inset $top $left $blur $spread $color;
       -moz-box-shadow: inset $top $left $blur $spread $color;
            box-shadow: inset $top $left $blur  $spread $color;
  } @else {
    -webkit-box-shadow: $top $left $blur $spread $color;
       -moz-box-shadow: $top $left $blur $spread $color;
            box-shadow: $top $left $blur $spread $color;
  }
}

@mixin box-sizing($arg: border-box) {
  -webkit-box-sizing: $arg;
     -moz-box-sizing: $arg;
       -o-box-sizing: $arg;
          box-sizing: $arg; }

@mixin opacity($value) {
  $percent: $value * 100;
  -khtml-opacity: $value;
    -moz-opacity: $value;
      -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$percent})";
         opacity: $value;
          filter: alpha(opacity=$percent); }

@mixin background-clip($value){
  // border, padding, content
  -webkit-background-clip: $value;  /* Safari 4? Chrome 6? */
      -moz-background-clip: $value;     /* Firefox 3.6 */
          background-clip: #{$value}-box;   /* Firefox 4, Safari 5, Opera 10, IE 9 */ }

@mixin transparent($color, $alpha) {
  $rgba: rgba($color, $alpha);
  $ie-hex-str: ie-hex-str($rgba);
  background-color: transparent;
  background-color: $rgba;
  filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=#{$ie-hex-str},endColorstr=#{$ie-hex-str});
}

@mixin gradient($start-color:#fff, $start-alpha:1, $end-color:#000, $end-alpha:0, $from:left, $to:right, $distance: 100%){
  $start-rgba: rgba($start-color, $start-alpha);
  $end-rgba:   rgba($end-color, $end-alpha);
  $start-ie-hex-str: ie-hex-str($start-rgba);
  $end-ie-hex-str:   ie-hex-str($end-rgba);
  background: -moz-linear-gradient($from, $start-rgba 0%, $end-rgba $distance); // FF3.6+
  background: -webkit-gradient(linear, $from top, $to top, color-stop(0%, $start-rgba), color-stop($distance, $end-rgba)); // Chrome,Safari4+
  background: -webkit-linear-gradient($from, $start-rgba 0%, $end-rgba $distance); // Chrome10+,Safari5.1+
  background: -o-linear-gradient($from, $start-rgba 0%, $end-rgba $distance); // Opera 11.10+
  background: -ms-linear-gradient($from, $start-rgba 0%, $end-rgba $distance); // IE10+
  background: linear-gradient(to $to, $start-rgba 0%, $end-rgba $distance); // W3C
  filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{$start-ie-hex-str}', endColorstr='#{$end-ie-hex-str}',GradientType=1 ); // IE6-9 
}

@mixin blur($value){
  -webkit-filter: blur($value);
          filter: blur($value);
}

//============================================================
// possition
//============================================================
@mixin position($position, $args: ()) {
  $offsets: top right bottom left;
  position: $position;

  @each $offset in $offsets {
    $index: index($args, $offset);
    @if $index {
      @if $index == length($args) {
        #{$offset}: 0;
      } @else {
        $next: nth($args, $index + 1);
        @if is-valid-length($next) {
          #{$offset}: $next;
        } @else if index($offsets, $next) {
          #{$offset}: 0;
        } @else {
          @warn "Invalid value `#{$next}` for offset `#{$offset}`.";
        }
      }
    }
  }
}

@mixin absolute($args: ()) { @include position(absolute, $args); }
@mixin fixed($args: ()) { @include position(fixed, $args); }
@mixin relative($args: ()) { @include position(relative, $args); }

//============================================================
// Transforms
//============================================================
@mixin transform($args...) {
  -webkit-transform: $args;
     -moz-transform: $args;
      -ms-transform: $args;
       -o-transform: $args;
          transform: $args; }

@mixin skew($x, $y)           { @include transform(skew($x, $y)); }
@mixin scale($scale...)       { @include transform(scale($scale)); }
@mixin scaleX($scale)         { @include transform(scaleX($scale)); }
@mixin scaleY($scale)         { @include transform(scaleY($scale)); }
@mixin rotate($deg)           { @include transform(rotate($deg)); }
@mixin rotateY($deg)          { @include transform(rotateY($deg)); }
@mixin rotateX($deg)          { @include transform(rotateX($deg)); }
@mixin scale3d($sx, $sy, $sz) { @include transform(scale3d($sx, $sy, $sz)); }
@mixin translate($x, $y)      { @include transform(translate($x, $y)); }
@mixin translateX($x)         { @include transform(translateX($x)); }
@mixin translateY($y)         { @include transform(translateY($y)); }
@mixin translateZ($z)         { @include transform(translateZ($z)); }

@mixin transform-origin ($args...) {
  -webkit-transform-origin: $args;
     -moz-transform-origin: $args;
      -ms-transform-origin: $args;
       -o-transform-origin: $args;
          transform-origin: $args; }

@mixin transform-style ($args...) {
  -webkit-transform-style: $args;
     -moz-transform-style: $args;
      -ms-transform-style: $args;
       -o-transform-style: $args;
          transform-style: $args; }

//============================================================
// animation
//============================================================
@mixin animation($args...) {
  -webkit-animation: $args;
     -moz-animation: $args;
      -ms-animation: $args;
       -o-animation: $args;
          animation: $args; }

@mixin transition($args...){
  -webkit-transition: $args;
     -moz-transition: $args;
      -ms-transition: $args;
       -o-transition: $args;
          transition: $args; }

@mixin transition-property($args: all) {
  -webkit-transition-property: $args;
     -moz-transition-property: $args;
       -o-transition-property: $args; 
          transition-property: $args; }
          
@mixin transition-duration($args: 600ms) {
  -webkit-transition-duration: $args;
     -moz-transition-duration: $args;
       -o-transition-duration: $args;
          transition-duration: $args; }

@mixin transition-timing-function($args: linear) {
  -webkit-transition-timing-function: $args;
     -moz-transition-timing-function: $args;
       -o-transition-timing-function: $args;
          transition-timing-function: $args; }

@mixin transition-delay($args: 0) {
  -webkit-transition-delay: $args;
     -moz-transition-delay: $args;
       -o-transition-delay: $args;
          transition-delay: $args; }

@mixin animation-timing-function($args: linear) {
  -webkit-animation-timing-function: $args;
     -moz-animation-timing-function: $args;
       -o-animation-timing-function: $args;
          animation-timing-function: $args; }

@mixin keyframes($animationName...) {
  @-webkit-keyframes #{$animationName} { @content; }
     @-moz-keyframes #{$animationName} { @content; }
       @-o-keyframes #{$animationName} { @content; }
          @keyframes #{$animationName} { @content; } }